name: build-and-release

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]   # e.g., v1.2.3
  pull_request:

permissions:
  contents: write

jobs:
  build:
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]

    env:
      BUILD_TYPE: Release
      GENERATOR: Ninja

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build ccache

      - name: Setup dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install ninja ccache

      - name: ccache
        uses: hendrikmuhs/ccache-action@v1
        with:
          key: ${{ runner.os }}-scc
          max-size: 300M

      - name: Configure (CMake)
        shell: bash
        run: |
          cmake -S . -B build \
            -G "${GENERATOR}" \
            -DCMAKE_BUILD_TYPE=${BUILD_TYPE} \
            -DFTXUI_QUIET=ON \
            -DCMAKE_POLICY_DEFAULT_CMP0135=NEW

      - name: Build
        shell: bash
        run: cmake --build build --parallel

      - name: Test
        shell: bash
        run: ctest --test-dir build -C ${BUILD_TYPE} -V

      - name: Package artifact
        shell: bash
        run: |
          set -eux
          OUTDIR=dist
          mkdir -p "$OUTDIR"
          BIN_NAME="scc"
          BIN_PATH="build/${BIN_NAME}"
          if [[ "${GITHUB_REF_TYPE}" == "tag" ]]; then
            VERSION="${GITHUB_REF_NAME}"
          else
            VERSION="nightly-${GITHUB_SHA:0:7}"
          fi
          PKG_BASE="${BIN_NAME}-${VERSION}-${{ runner.os }}-x86_64"

          mkdir -p "${OUTDIR}/${PKG_BASE}"
          cp "${BIN_PATH}" "${OUTDIR}/${PKG_BASE}/"
          cp -n LICENSE "${OUTDIR}/${PKG_BASE}/" || true
          cp -n README.md "${OUTDIR}/${PKG_BASE}/" || true

          pushd "${OUTDIR}"
          tar czf "${PKG_BASE}.tar.gz" "${PKG_BASE}"
          popd

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}-artifact
          path: dist/*.tar.gz

  release:
    name: Publish GitHub Release
    needs: [build]
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
